name: Update

on:
  push:
    branches:
      - main

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd backend
            git pull origin main
            
            docker-compose down --remove-orphans
            
            sudo rm -rf ./nginx-data/certs/*
            
            sudo openssl req -x509 -nodes -days 365 \
                -newkey rsa:2048 \
                -keyout nginx-data/certs/localhost.key \
                -out nginx-data/certs/localhost.crt \
                -subj "/CN=localhost"
            
            sudo chmod 644 ./nginx-data/certs/localhost.key
            sudo chmod 644 ./nginx-data/certs/localhost.crt
            
            docker-compose up -d --build

  check_postgres:
    runs-on: ubuntu-latest
    needs: update
    timeout-minutes: 10
    steps:
      - name: Check Postgres connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            bash ./backend/docker/test-db-connection.sh

      - name: Check database
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            POSTGRES_USER=$(docker exec postgres env | grep POSTGRES_USER | cut -d= -f2 || echo "postgres")
            POSTGRES_PASSWORD=$(docker exec postgres env | grep POSTGRES_PASSWORD | cut -d= -f2)
            POSTGRES_DB=$(docker exec postgres env | grep POSTGRES_DB | cut -d= -f2 || echo "postgres")

            if PGPASSWORD="$POSTGRES_PASSWORD" psql -h localhost -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB'" | grep -q 1; then
              echo "База данных '$POSTGRES_DB' существует"
              exit 0
            else
              echo "База данных '$POSTGRES_DB' не существует"  
              echo "Доступные базы данных:"
              PGPASSWORD="$POSTGRES_PASSWORD" psql -h localhost -U "$POSTGRES_USER" -d postgres -tAc "SELECT datname FROM pg_database WHERE datistemplate = false"
              exit 1
            fi

  check_backend:
    runs-on: ubuntu-latest
    needs: update
    timeout-minutes: 10
    steps:
      - name: Check HTTP server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            TIMEOUT=120
            INTERVAL=10
            START_TIME=$(date +%s)
            
            while true; do
              BACKEND_HEALTH=$(docker inspect --format '{{.State.Health.Status}}' minifylink 2>/dev/null || echo "not-found")
              
              if [[ "$BACKEND_HEALTH" == "healthy" ]]; then
                echo "Backend в состоянии healthy"
                break
              fi
              
              if (( $(date +%s) - START_TIME >= TIMEOUT )); then
                echo "Таймаут ожидания healthy состояния"
                echo "Текущее состояние: $BACKEND_HEALTH"
                docker logs minifylink || echo "Контейнер minifylink не найден"
                exit 1
              fi
              echo "Ожидание состояния healthy для backend. Текущее состояние: $BACKEND_HEALTH"
              sleep $INTERVAL
            done

  check_nginx:
    runs-on: ubuntu-latest
    needs: check_backend
    timeout-minutes: 10
    steps:
      - name: Check HTTP server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            TIMEOUT=120
            INTERVAL=10
            START_TIME=$(date +%s)
            
            while true; do
              NGINX_HEALTH=$(docker inspect --format '{{.State.Health.Status}}' nginx_proxy 2>/dev/null || echo "not-found")
              
              if [[ "$NGINX_HEALTH" == "healthy" ]]; then
                echo "Nginx в состоянии healthy"
                if curl -sf "http://localhost/healthy" > /dev/null; then
                  echo "HTTP сервер доступен"
                  break
                else
                  echo "Nginx healthy, но HTTP-запрос не прошел"
                fi
              fi
              
              if (( $(date +%s) - START_TIME >= TIMEOUT )); then
                echo "Таймаут ожидания healthy состояния"
                echo "Текущее состояние nginx: $NGINX_HEALTH"
                docker logs nginx_proxy || echo "Контейнер nginx_proxy не найден"
                exit 1
              fi
              
              echo "Ожидание состояния healthy для nginx. Текущее состояние: $NGINX_HEALTH"
              sleep $INTERVAL
            done
