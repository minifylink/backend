name: Update

on:
  push:
    branches:
      - main

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd backend
            git pull origin main
            
            docker-compose down --remove-orphans
            
            sudo rm -rf ./nginx-data/certs/*
            
            sudo openssl req -x509 -nodes -days 365 \
                -newkey rsa:2048 \
                -keyout nginx-data/certs/localhost.key \
                -out nginx-data/certs/localhost.crt \
                -subj "/CN=localhost"
            
            docker-compose up -d --build

  check_postgres:
    runs-on: ubuntu-latest
    needs: update
    timeout-minutes: 10
    steps:
      - name: Check Postgres connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            bash ./backend/docker/test-db-connection.sh

      - name: Check database
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            POSTGRES_USER=$(docker exec postgres env | grep POSTGRES_USER | cut -d= -f2 || echo "postgres")
            POSTGRES_PASSWORD=$(docker exec postgres env | grep POSTGRES_PASSWORD | cut -d= -f2)
            POSTGRES_DB=$(docker exec postgres env | grep POSTGRES_DB | cut -d= -f2 || echo "postgres")

            if PGPASSWORD="$POSTGRES_PASSWORD" psql -h localhost -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB'" | grep -q 1; then
              echo "База данных '$POSTGRES_DB' существует"
              exit 0
            else
              echo "База данных '$POSTGRES_DB' не существует"  
              echo "Доступные базы данных:"
              PGPASSWORD="$POSTGRES_PASSWORD" psql -h localhost -U "$POSTGRES_USER" -d postgres -tAc "SELECT datname FROM pg_database WHERE datistemplate = false"
              exit 1
            fi

  check_backend:
    runs-on: ubuntu-latest
    needs: update
    timeout-minutes: 10
    steps:
      - name: Check HTTP server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            BACKEND_HEALTH=$(docker inspect --format '{{.State.Health.Status}}' minifylink)

            if [[ "$BACKEND_HEALTH" != "healthy" ]]; then
              echo "Backend не в состоянии healthy";
              docker logs minifylink || echo "Backend не запустился";
              exit 1;
            fi

  check_nginx:
    runs-on: ubuntu-latest
    needs: check_backend
    timeout-minutes: 10
    steps:
      - name: Check HTTP server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            TIMEOUT=120
            INTERVAL=10
            START_TIME=$(date +%s)

            try_until_success() {
              local url=$1
              local message=$2
              while true; do
                curl -f "$url" && return 0
                if (( $(date +%s) - START_TIME >= TIMEOUT )); then
                  echo "$message"
                  docker logs nginx_letsencrypt || echo "nginx_letsencrypt не запустился";
                  exit 1
                fi
                echo "Попытка подключения к $url не удалась, повторяю..."
                sleep $INTERVAL
              done
            }

            NGINX_PROXY_HEALTH=$(docker inspect --format '{{.State.Health.Status}}' nginx_proxy)

            if [[ "$NGINX_PROXY_HEALTH" != "healthy" ]]; then
              echo "nginx_proxy не в состоянии healthy";
              docker logs nginx_proxy || echo "nginx_proxy не запустился";
              exit 1;
            fi

            try_until_success "http://localhost" "HTTP сервер не доступен"
